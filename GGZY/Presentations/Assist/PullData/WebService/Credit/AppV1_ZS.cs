//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码由 wsdl 自动生成, Version=4.8.3928.0。
// 
namespace PullData.Credit
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "AppV1Soap", Namespace = "http://fgi.net.cn/credit")]
    public partial class AppV1 : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback GeneralOrgCheckOperationCompleted;

        private System.Threading.SendOrPostCallback GeneralIndividualCheckOperationCompleted;

        private System.Threading.SendOrPostCallback CheckOrgOperationCompleted;

        private System.Threading.SendOrPostCallback CheckIndividualOperationCompleted;

        private System.Threading.SendOrPostCallback SubmitPunishmentOperationCompleted;

        private System.Threading.SendOrPostCallback RevokePunishmentOperationCompleted;

        private System.Threading.SendOrPostCallback BeginLoginOperationCompleted;

        private System.Threading.SendOrPostCallback EndLoginOperationCompleted;

        /// <remarks/>
        public AppV1()
        {
            this.Url = "http://120.35.29.217:810/Service/AppV1.asmx";
        }

        /// <remarks/>
        public event GeneralOrgCheckCompletedEventHandler GeneralOrgCheckCompleted;

        /// <remarks/>
        public event GeneralIndividualCheckCompletedEventHandler GeneralIndividualCheckCompleted;

        /// <remarks/>
        public event CheckOrgCompletedEventHandler CheckOrgCompleted;

        /// <remarks/>
        public event CheckIndividualCompletedEventHandler CheckIndividualCompleted;

        /// <remarks/>
        public event SubmitPunishmentCompletedEventHandler SubmitPunishmentCompleted;

        /// <remarks/>
        public event RevokePunishmentCompletedEventHandler RevokePunishmentCompleted;

        /// <remarks/>
        public event BeginLoginCompletedEventHandler BeginLoginCompleted;

        /// <remarks/>
        public event EndLoginCompletedEventHandler EndLoginCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fgi.net.cn/credit/GeneralOrgCheck", RequestNamespace = "http://fgi.net.cn/credit", ResponseNamespace = "http://fgi.net.cn/credit", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GeneralOrgCheck(string token, string usci, string actualOrgUser)
        {
            object[] results = this.Invoke("GeneralOrgCheck", new object[] {
                        token,
                        usci,
                        actualOrgUser});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGeneralOrgCheck(string token, string usci, string actualOrgUser, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GeneralOrgCheck", new object[] {
                        token,
                        usci,
                        actualOrgUser}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGeneralOrgCheck(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GeneralOrgCheckAsync(string token, string usci, string actualOrgUser)
        {
            this.GeneralOrgCheckAsync(token, usci, actualOrgUser, null);
        }

        /// <remarks/>
        public void GeneralOrgCheckAsync(string token, string usci, string actualOrgUser, object userState)
        {
            if ((this.GeneralOrgCheckOperationCompleted == null))
            {
                this.GeneralOrgCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneralOrgCheckOperationCompleted);
            }
            this.InvokeAsync("GeneralOrgCheck", new object[] {
                        token,
                        usci,
                        actualOrgUser}, this.GeneralOrgCheckOperationCompleted, userState);
        }

        private void OnGeneralOrgCheckOperationCompleted(object arg)
        {
            if ((this.GeneralOrgCheckCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeneralOrgCheckCompleted(this, new GeneralOrgCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fgi.net.cn/credit/GeneralIndividualCheck", RequestNamespace = "http://fgi.net.cn/credit", ResponseNamespace = "http://fgi.net.cn/credit", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GeneralIndividualCheck(string token, string name, string certType, string certNum, string actualOrgUser)
        {
            object[] results = this.Invoke("GeneralIndividualCheck", new object[] {
                        token,
                        name,
                        certType,
                        certNum,
                        actualOrgUser});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGeneralIndividualCheck(string token, string name, string certType, string certNum, string actualOrgUser, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GeneralIndividualCheck", new object[] {
                        token,
                        name,
                        certType,
                        certNum,
                        actualOrgUser}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGeneralIndividualCheck(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GeneralIndividualCheckAsync(string token, string name, string certType, string certNum, string actualOrgUser)
        {
            this.GeneralIndividualCheckAsync(token, name, certType, certNum, actualOrgUser, null);
        }

        /// <remarks/>
        public void GeneralIndividualCheckAsync(string token, string name, string certType, string certNum, string actualOrgUser, object userState)
        {
            if ((this.GeneralIndividualCheckOperationCompleted == null))
            {
                this.GeneralIndividualCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneralIndividualCheckOperationCompleted);
            }
            this.InvokeAsync("GeneralIndividualCheck", new object[] {
                        token,
                        name,
                        certType,
                        certNum,
                        actualOrgUser}, this.GeneralIndividualCheckOperationCompleted, userState);
        }

        private void OnGeneralIndividualCheckOperationCompleted(object arg)
        {
            if ((this.GeneralIndividualCheckCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeneralIndividualCheckCompleted(this, new GeneralIndividualCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fgi.net.cn/credit/CheckOrg", RequestNamespace = "http://fgi.net.cn/credit", ResponseNamespace = "http://fgi.net.cn/credit", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckOrg(string token, int list, string certType, string certNum, string actualOrgUser)
        {
            object[] results = this.Invoke("CheckOrg", new object[] {
                        token,
                        list,
                        certType,
                        certNum,
                        actualOrgUser});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckOrg(string token, int list, string certType, string certNum, string actualOrgUser, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckOrg", new object[] {
                        token,
                        list,
                        certType,
                        certNum,
                        actualOrgUser}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCheckOrg(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckOrgAsync(string token, int list, string certType, string certNum, string actualOrgUser)
        {
            this.CheckOrgAsync(token, list, certType, certNum, actualOrgUser, null);
        }

        /// <remarks/>
        public void CheckOrgAsync(string token, int list, string certType, string certNum, string actualOrgUser, object userState)
        {
            if ((this.CheckOrgOperationCompleted == null))
            {
                this.CheckOrgOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOrgOperationCompleted);
            }
            this.InvokeAsync("CheckOrg", new object[] {
                        token,
                        list,
                        certType,
                        certNum,
                        actualOrgUser}, this.CheckOrgOperationCompleted, userState);
        }

        private void OnCheckOrgOperationCompleted(object arg)
        {
            if ((this.CheckOrgCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckOrgCompleted(this, new CheckOrgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fgi.net.cn/credit/CheckIndividual", RequestNamespace = "http://fgi.net.cn/credit", ResponseNamespace = "http://fgi.net.cn/credit", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckIndividual(string token, int list, string name, string certType, string certNum, string actualOrgUser)
        {
            object[] results = this.Invoke("CheckIndividual", new object[] {
                        token,
                        list,
                        name,
                        certType,
                        certNum,
                        actualOrgUser});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckIndividual(string token, int list, string name, string certType, string certNum, string actualOrgUser, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckIndividual", new object[] {
                        token,
                        list,
                        name,
                        certType,
                        certNum,
                        actualOrgUser}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCheckIndividual(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckIndividualAsync(string token, int list, string name, string certType, string certNum, string actualOrgUser)
        {
            this.CheckIndividualAsync(token, list, name, certType, certNum, actualOrgUser, null);
        }

        /// <remarks/>
        public void CheckIndividualAsync(string token, int list, string name, string certType, string certNum, string actualOrgUser, object userState)
        {
            if ((this.CheckIndividualOperationCompleted == null))
            {
                this.CheckIndividualOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckIndividualOperationCompleted);
            }
            this.InvokeAsync("CheckIndividual", new object[] {
                        token,
                        list,
                        name,
                        certType,
                        certNum,
                        actualOrgUser}, this.CheckIndividualOperationCompleted, userState);
        }

        private void OnCheckIndividualOperationCompleted(object arg)
        {
            if ((this.CheckIndividualCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckIndividualCompleted(this, new CheckIndividualCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fgi.net.cn/credit/SubmitPunishment", RequestNamespace = "http://fgi.net.cn/credit", ResponseNamespace = "http://fgi.net.cn/credit", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SubmitPunishment(string token, string ticket, string org, string biz, string measureName, string measure, string amountInvolved, string actualOrgUser, string timestamp, string sig)
        {
            object[] results = this.Invoke("SubmitPunishment", new object[] {
                        token,
                        ticket,
                        org,
                        biz,
                        measureName,
                        measure,
                        amountInvolved,
                        actualOrgUser,
                        timestamp,
                        sig});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSubmitPunishment(string token, string ticket, string org, string biz, string measureName, string measure, string amountInvolved, string actualOrgUser, string timestamp, string sig, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SubmitPunishment", new object[] {
                        token,
                        ticket,
                        org,
                        biz,
                        measureName,
                        measure,
                        amountInvolved,
                        actualOrgUser,
                        timestamp,
                        sig}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSubmitPunishment(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SubmitPunishmentAsync(string token, string ticket, string org, string biz, string measureName, string measure, string amountInvolved, string actualOrgUser, string timestamp, string sig)
        {
            this.SubmitPunishmentAsync(token, ticket, org, biz, measureName, measure, amountInvolved, actualOrgUser, timestamp, sig, null);
        }

        /// <remarks/>
        public void SubmitPunishmentAsync(string token, string ticket, string org, string biz, string measureName, string measure, string amountInvolved, string actualOrgUser, string timestamp, string sig, object userState)
        {
            if ((this.SubmitPunishmentOperationCompleted == null))
            {
                this.SubmitPunishmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitPunishmentOperationCompleted);
            }
            this.InvokeAsync("SubmitPunishment", new object[] {
                        token,
                        ticket,
                        org,
                        biz,
                        measureName,
                        measure,
                        amountInvolved,
                        actualOrgUser,
                        timestamp,
                        sig}, this.SubmitPunishmentOperationCompleted, userState);
        }

        private void OnSubmitPunishmentOperationCompleted(object arg)
        {
            if ((this.SubmitPunishmentCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitPunishmentCompleted(this, new SubmitPunishmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fgi.net.cn/credit/RevokePunishment", RequestNamespace = "http://fgi.net.cn/credit", ResponseNamespace = "http://fgi.net.cn/credit", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RevokePunishment(string token, string id, string reason, string timestamp, string sig)
        {
            object[] results = this.Invoke("RevokePunishment", new object[] {
                        token,
                        id,
                        reason,
                        timestamp,
                        sig});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRevokePunishment(string token, string id, string reason, string timestamp, string sig, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RevokePunishment", new object[] {
                        token,
                        id,
                        reason,
                        timestamp,
                        sig}, callback, asyncState);
        }

        /// <remarks/>
        public string EndRevokePunishment(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void RevokePunishmentAsync(string token, string id, string reason, string timestamp, string sig)
        {
            this.RevokePunishmentAsync(token, id, reason, timestamp, sig, null);
        }

        /// <remarks/>
        public void RevokePunishmentAsync(string token, string id, string reason, string timestamp, string sig, object userState)
        {
            if ((this.RevokePunishmentOperationCompleted == null))
            {
                this.RevokePunishmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRevokePunishmentOperationCompleted);
            }
            this.InvokeAsync("RevokePunishment", new object[] {
                        token,
                        id,
                        reason,
                        timestamp,
                        sig}, this.RevokePunishmentOperationCompleted, userState);
        }

        private void OnRevokePunishmentOperationCompleted(object arg)
        {
            if ((this.RevokePunishmentCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RevokePunishmentCompleted(this, new RevokePunishmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fgi.net.cn/credit/BeginLogin", RequestNamespace = "http://fgi.net.cn/credit", ResponseNamespace = "http://fgi.net.cn/credit", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BeginLogin(string userName)
        {
            object[] results = this.Invoke("BeginLogin", new object[] {
                        userName});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginBeginLogin(string userName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("BeginLogin", new object[] {
                        userName}, callback, asyncState);
        }

        /// <remarks/>
        public string EndBeginLogin(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void BeginLoginAsync(string userName)
        {
            this.BeginLoginAsync(userName, null);
        }

        /// <remarks/>
        public void BeginLoginAsync(string userName, object userState)
        {
            if ((this.BeginLoginOperationCompleted == null))
            {
                this.BeginLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBeginLoginOperationCompleted);
            }
            this.InvokeAsync("BeginLogin", new object[] {
                        userName}, this.BeginLoginOperationCompleted, userState);
        }

        private void OnBeginLoginOperationCompleted(object arg)
        {
            if ((this.BeginLoginCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BeginLoginCompleted(this, new BeginLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fgi.net.cn/credit/EndLogin", RequestNamespace = "http://fgi.net.cn/credit", ResponseNamespace = "http://fgi.net.cn/credit", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EndLogin(string userName, string salt, string pwdCipher)
        {
            object[] results = this.Invoke("EndLogin", new object[] {
                        userName,
                        salt,
                        pwdCipher});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginEndLogin(string userName, string salt, string pwdCipher, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("EndLogin", new object[] {
                        userName,
                        salt,
                        pwdCipher}, callback, asyncState);
        }

        /// <remarks/>
        public string EndEndLogin(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void EndLoginAsync(string userName, string salt, string pwdCipher)
        {
            this.EndLoginAsync(userName, salt, pwdCipher, null);
        }

        /// <remarks/>
        public void EndLoginAsync(string userName, string salt, string pwdCipher, object userState)
        {
            if ((this.EndLoginOperationCompleted == null))
            {
                this.EndLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEndLoginOperationCompleted);
            }
            this.InvokeAsync("EndLogin", new object[] {
                        userName,
                        salt,
                        pwdCipher}, this.EndLoginOperationCompleted, userState);
        }

        private void OnEndLoginOperationCompleted(object arg)
        {
            if ((this.EndLoginCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EndLoginCompleted(this, new EndLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GeneralOrgCheckCompletedEventHandler(object sender, GeneralOrgCheckCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeneralOrgCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GeneralOrgCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GeneralIndividualCheckCompletedEventHandler(object sender, GeneralIndividualCheckCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeneralIndividualCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GeneralIndividualCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void CheckOrgCompletedEventHandler(object sender, CheckOrgCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckOrgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckOrgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void CheckIndividualCompletedEventHandler(object sender, CheckIndividualCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckIndividualCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckIndividualCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void SubmitPunishmentCompletedEventHandler(object sender, SubmitPunishmentCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitPunishmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SubmitPunishmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void RevokePunishmentCompletedEventHandler(object sender, RevokePunishmentCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RevokePunishmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RevokePunishmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void BeginLoginCompletedEventHandler(object sender, BeginLoginCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BeginLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal BeginLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void EndLoginCompletedEventHandler(object sender, EndLoginCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EndLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal EndLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
