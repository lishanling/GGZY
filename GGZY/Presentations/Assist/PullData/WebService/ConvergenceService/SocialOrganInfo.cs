//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码由 wsdl 自动生成, Version=4.8.3928.0。
// 
namespace PullData.ConvergenceService.Social
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SocialOrganInfoSoap", Namespace="http://tempuri.org/")]
    public partial class SocialOrganInfo : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback queryByOrganOperationCompleted;
        
        private System.Threading.SendOrPostCallback queryByUSCCOperationCompleted;
        
        /// <remarks/>
        public SocialOrganInfo() {
            this.Url = "http://220.160.52.50:801/ConvergenceSerivce/SocialOrganInfo.asmx";
        }
        
        /// <remarks/>
        public event queryByOrganCompletedEventHandler queryByOrganCompleted;
        
        /// <remarks/>
        public event queryByUSCCCompletedEventHandler queryByUSCCCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/queryByOrgan", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string queryByOrgan(string guid, string organ) {
            object[] results = this.Invoke("queryByOrgan", new object[] {
                        guid,
                        organ});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginqueryByOrgan(string guid, string organ, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("queryByOrgan", new object[] {
                        guid,
                        organ}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndqueryByOrgan(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void queryByOrganAsync(string guid, string organ) {
            this.queryByOrganAsync(guid, organ, null);
        }
        
        /// <remarks/>
        public void queryByOrganAsync(string guid, string organ, object userState) {
            if ((this.queryByOrganOperationCompleted == null)) {
                this.queryByOrganOperationCompleted = new System.Threading.SendOrPostCallback(this.OnqueryByOrganOperationCompleted);
            }
            this.InvokeAsync("queryByOrgan", new object[] {
                        guid,
                        organ}, this.queryByOrganOperationCompleted, userState);
        }
        
        private void OnqueryByOrganOperationCompleted(object arg) {
            if ((this.queryByOrganCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.queryByOrganCompleted(this, new queryByOrganCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/queryByUSCC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string queryByUSCC(string guid, string USCC) {
            object[] results = this.Invoke("queryByUSCC", new object[] {
                        guid,
                        USCC});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginqueryByUSCC(string guid, string USCC, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("queryByUSCC", new object[] {
                        guid,
                        USCC}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndqueryByUSCC(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void queryByUSCCAsync(string guid, string USCC) {
            this.queryByUSCCAsync(guid, USCC, null);
        }
        
        /// <remarks/>
        public void queryByUSCCAsync(string guid, string USCC, object userState) {
            if ((this.queryByUSCCOperationCompleted == null)) {
                this.queryByUSCCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnqueryByUSCCOperationCompleted);
            }
            this.InvokeAsync("queryByUSCC", new object[] {
                        guid,
                        USCC}, this.queryByUSCCOperationCompleted, userState);
        }
        
        private void OnqueryByUSCCOperationCompleted(object arg) {
            if ((this.queryByUSCCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.queryByUSCCCompleted(this, new queryByUSCCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void queryByOrganCompletedEventHandler(object sender, queryByOrganCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class queryByOrganCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal queryByOrganCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void queryByUSCCCompletedEventHandler(object sender, queryByUSCCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class queryByUSCCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal queryByUSCCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
