//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码由 wsdl 自动生成, Version=4.8.3928.0。
// 
namespace GGZY.DataService.ConvergenceService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="OldageInsuranceSoap", Namespace="http://tempuri.org/")]
    public partial class OldageInsurance : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback queryPayByOrganMonthOperationCompleted;
        
        private System.Threading.SendOrPostCallback queryPayByIDMonthOperationCompleted;
        
        private System.Threading.SendOrPostCallback queryRelByIDRelMonthOperationCompleted;
        
        /// <remarks/>
        public OldageInsurance() {
            this.Url = "http://220.160.52.50:801/ConvergenceSerivce/OldageInsurance.asmx";
        }
        
        /// <remarks/>
        public event queryPayByOrganMonthCompletedEventHandler queryPayByOrganMonthCompleted;
        
        /// <remarks/>
        public event queryPayByIDMonthCompletedEventHandler queryPayByIDMonthCompleted;
        
        /// <remarks/>
        public event queryRelByIDRelMonthCompletedEventHandler queryRelByIDRelMonthCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/queryPayByOrganMonth", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string queryPayByOrganMonth(string guid, string organ, string month) {
            object[] results = this.Invoke("queryPayByOrganMonth", new object[] {
                        guid,
                        organ,
                        month});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginqueryPayByOrganMonth(string guid, string organ, string month, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("queryPayByOrganMonth", new object[] {
                        guid,
                        organ,
                        month}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndqueryPayByOrganMonth(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void queryPayByOrganMonthAsync(string guid, string organ, string month) {
            this.queryPayByOrganMonthAsync(guid, organ, month, null);
        }
        
        /// <remarks/>
        public void queryPayByOrganMonthAsync(string guid, string organ, string month, object userState) {
            if ((this.queryPayByOrganMonthOperationCompleted == null)) {
                this.queryPayByOrganMonthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnqueryPayByOrganMonthOperationCompleted);
            }
            this.InvokeAsync("queryPayByOrganMonth", new object[] {
                        guid,
                        organ,
                        month}, this.queryPayByOrganMonthOperationCompleted, userState);
        }
        
        private void OnqueryPayByOrganMonthOperationCompleted(object arg) {
            if ((this.queryPayByOrganMonthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.queryPayByOrganMonthCompleted(this, new queryPayByOrganMonthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/queryPayByIDMonth", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string queryPayByIDMonth(string guid, string id, string month) {
            object[] results = this.Invoke("queryPayByIDMonth", new object[] {
                        guid,
                        id,
                        month});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginqueryPayByIDMonth(string guid, string id, string month, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("queryPayByIDMonth", new object[] {
                        guid,
                        id,
                        month}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndqueryPayByIDMonth(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void queryPayByIDMonthAsync(string guid, string id, string month) {
            this.queryPayByIDMonthAsync(guid, id, month, null);
        }
        
        /// <remarks/>
        public void queryPayByIDMonthAsync(string guid, string id, string month, object userState) {
            if ((this.queryPayByIDMonthOperationCompleted == null)) {
                this.queryPayByIDMonthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnqueryPayByIDMonthOperationCompleted);
            }
            this.InvokeAsync("queryPayByIDMonth", new object[] {
                        guid,
                        id,
                        month}, this.queryPayByIDMonthOperationCompleted, userState);
        }
        
        private void OnqueryPayByIDMonthOperationCompleted(object arg) {
            if ((this.queryPayByIDMonthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.queryPayByIDMonthCompleted(this, new queryPayByIDMonthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/queryRelByIDRelMonth", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string queryRelByIDRelMonth(string guid, string id, string relMonth) {
            object[] results = this.Invoke("queryRelByIDRelMonth", new object[] {
                        guid,
                        id,
                        relMonth});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginqueryRelByIDRelMonth(string guid, string id, string relMonth, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("queryRelByIDRelMonth", new object[] {
                        guid,
                        id,
                        relMonth}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndqueryRelByIDRelMonth(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void queryRelByIDRelMonthAsync(string guid, string id, string relMonth) {
            this.queryRelByIDRelMonthAsync(guid, id, relMonth, null);
        }
        
        /// <remarks/>
        public void queryRelByIDRelMonthAsync(string guid, string id, string relMonth, object userState) {
            if ((this.queryRelByIDRelMonthOperationCompleted == null)) {
                this.queryRelByIDRelMonthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnqueryRelByIDRelMonthOperationCompleted);
            }
            this.InvokeAsync("queryRelByIDRelMonth", new object[] {
                        guid,
                        id,
                        relMonth}, this.queryRelByIDRelMonthOperationCompleted, userState);
        }
        
        private void OnqueryRelByIDRelMonthOperationCompleted(object arg) {
            if ((this.queryRelByIDRelMonthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.queryRelByIDRelMonthCompleted(this, new queryRelByIDRelMonthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void queryPayByOrganMonthCompletedEventHandler(object sender, queryPayByOrganMonthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class queryPayByOrganMonthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal queryPayByOrganMonthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void queryPayByIDMonthCompletedEventHandler(object sender, queryPayByIDMonthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class queryPayByIDMonthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal queryPayByIDMonthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void queryRelByIDRelMonthCompletedEventHandler(object sender, queryRelByIDRelMonthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class queryRelByIDRelMonthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal queryRelByIDRelMonthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
