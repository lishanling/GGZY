//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码由 wsdl 自动生成, Version=4.8.3928.0。
// 
namespace GGZY.DataService.EgssService
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LicenseShareSoap", Namespace="http://tempuri.org/")]
    public partial class LicenseShare : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback testOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthorizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback PowerCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentListByQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentListByCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentListByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseDataByFileNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseDataByFileNumberTwoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseDataByHolderIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseDataByHolderNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseDataByQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseFileByFileNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseFileByFileNumberTwoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseFileByHolderIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseFileByHolderNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBusinessLicenseFileByHolderNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBusinessLicenseFileByHolderCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseFileByQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyLicenseByFileNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyLicenseByFileNumberTwoOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyLicenseByHolderIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyLicenseByHolderNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyLicenseByLicenseIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentListBySFZOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentListByQueryOfPersonOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseFileByQueryOfPersonOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseDataByQueryOfPersonOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseZMDataByFileNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPowerObjListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentListThrowCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentListThrowNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseZMDataFromDSOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseDataFromDSOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseFileFromDSOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyLicenseFromDSOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegLicenseShareLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentListByQuery_KXOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseImageByFileNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback LicenseIsExistOperationCompleted;
        
        /// <remarks/>
        public LicenseShare() {
            this.Url = "http://59.204.10.30:90/egssServices/LicenseShare.asmx";
        }
        
        /// <remarks/>
        public event testCompletedEventHandler testCompleted;
        
        /// <remarks/>
        public event AuthorizationCompletedEventHandler AuthorizationCompleted;
        
        /// <remarks/>
        public event GetLicenseTypeCompletedEventHandler GetLicenseTypeCompleted;
        
        /// <remarks/>
        public event PowerCheckCompletedEventHandler PowerCheckCompleted;
        
        /// <remarks/>
        public event GetDocumentListByQueryCompletedEventHandler GetDocumentListByQueryCompleted;
        
        /// <remarks/>
        public event GetDocumentListByCodeCompletedEventHandler GetDocumentListByCodeCompleted;
        
        /// <remarks/>
        public event GetDocumentListByNameCompletedEventHandler GetDocumentListByNameCompleted;
        
        /// <remarks/>
        public event GetLicenseDataByFileNumberCompletedEventHandler GetLicenseDataByFileNumberCompleted;
        
        /// <remarks/>
        public event GetLicenseDataByFileNumberTwoCompletedEventHandler GetLicenseDataByFileNumberTwoCompleted;
        
        /// <remarks/>
        public event GetLicenseDataByHolderIDCompletedEventHandler GetLicenseDataByHolderIDCompleted;
        
        /// <remarks/>
        public event GetLicenseDataByHolderNameCompletedEventHandler GetLicenseDataByHolderNameCompleted;
        
        /// <remarks/>
        public event GetLicenseDataByQueryCompletedEventHandler GetLicenseDataByQueryCompleted;
        
        /// <remarks/>
        public event GetLicenseDataCompletedEventHandler GetLicenseDataCompleted;
        
        /// <remarks/>
        public event GetLicenseFileByFileNumberCompletedEventHandler GetLicenseFileByFileNumberCompleted;
        
        /// <remarks/>
        public event GetLicenseFileByFileNumberTwoCompletedEventHandler GetLicenseFileByFileNumberTwoCompleted;
        
        /// <remarks/>
        public event GetLicenseFileByHolderIDCompletedEventHandler GetLicenseFileByHolderIDCompleted;
        
        /// <remarks/>
        public event GetLicenseFileByHolderNameCompletedEventHandler GetLicenseFileByHolderNameCompleted;
        
        /// <remarks/>
        public event GetLicenseFileCompletedEventHandler GetLicenseFileCompleted;
        
        /// <remarks/>
        public event GetBusinessLicenseFileByHolderNameCompletedEventHandler GetBusinessLicenseFileByHolderNameCompleted;
        
        /// <remarks/>
        public event GetBusinessLicenseFileByHolderCodeCompletedEventHandler GetBusinessLicenseFileByHolderCodeCompleted;
        
        /// <remarks/>
        public event GetLicenseFileByQueryCompletedEventHandler GetLicenseFileByQueryCompleted;
        
        /// <remarks/>
        public event VerifyLicenseByFileNumberCompletedEventHandler VerifyLicenseByFileNumberCompleted;
        
        /// <remarks/>
        public event VerifyLicenseByFileNumberTwoCompletedEventHandler VerifyLicenseByFileNumberTwoCompleted;
        
        /// <remarks/>
        public event VerifyLicenseByHolderIDCompletedEventHandler VerifyLicenseByHolderIDCompleted;
        
        /// <remarks/>
        public event VerifyLicenseByHolderNameCompletedEventHandler VerifyLicenseByHolderNameCompleted;
        
        /// <remarks/>
        public event VerifyLicenseByLicenseIDCompletedEventHandler VerifyLicenseByLicenseIDCompleted;
        
        /// <remarks/>
        public event GetDocumentListBySFZCompletedEventHandler GetDocumentListBySFZCompleted;
        
        /// <remarks/>
        public event GetDocumentListByQueryOfPersonCompletedEventHandler GetDocumentListByQueryOfPersonCompleted;
        
        /// <remarks/>
        public event GetLicenseFileByQueryOfPersonCompletedEventHandler GetLicenseFileByQueryOfPersonCompleted;
        
        /// <remarks/>
        public event GetLicenseDataByQueryOfPersonCompletedEventHandler GetLicenseDataByQueryOfPersonCompleted;
        
        /// <remarks/>
        public event GetLicenseZMDataByFileNumberCompletedEventHandler GetLicenseZMDataByFileNumberCompleted;
        
        /// <remarks/>
        public event GetPowerObjListCompletedEventHandler GetPowerObjListCompleted;
        
        /// <remarks/>
        public event GetDocumentListThrowCodeCompletedEventHandler GetDocumentListThrowCodeCompleted;
        
        /// <remarks/>
        public event GetDocumentListThrowNameCompletedEventHandler GetDocumentListThrowNameCompleted;
        
        /// <remarks/>
        public event GetLicenseZMDataFromDSCompletedEventHandler GetLicenseZMDataFromDSCompleted;
        
        /// <remarks/>
        public event GetLicenseDataFromDSCompletedEventHandler GetLicenseDataFromDSCompleted;
        
        /// <remarks/>
        public event GetLicenseFileFromDSCompletedEventHandler GetLicenseFileFromDSCompleted;
        
        /// <remarks/>
        public event VerifyLicenseFromDSCompletedEventHandler VerifyLicenseFromDSCompleted;
        
        /// <remarks/>
        public event RegLicenseShareLogCompletedEventHandler RegLicenseShareLogCompleted;
        
        /// <remarks/>
        public event GetDocumentListByQuery_KXCompletedEventHandler GetDocumentListByQuery_KXCompleted;
        
        /// <remarks/>
        public event GetLicenseImageByFileNumberCompletedEventHandler GetLicenseImageByFileNumberCompleted;
        
        /// <remarks/>
        public event LicenseIsExistCompletedEventHandler LicenseIsExistCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/test", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string test() {
            object[] results = this.Invoke("test", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult Begintest(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("test", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string Endtest(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void testAsync() {
            this.testAsync(null);
        }
        
        /// <remarks/>
        public void testAsync(object userState) {
            if ((this.testOperationCompleted == null)) {
                this.testOperationCompleted = new System.Threading.SendOrPostCallback(this.OntestOperationCompleted);
            }
            this.InvokeAsync("test", new object[0], this.testOperationCompleted, userState);
        }
        
        private void OntestOperationCompleted(object arg) {
            if ((this.testCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.testCompleted(this, new testCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Authorization", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Authorization(string username, string password) {
            object[] results = this.Invoke("Authorization", new object[] {
                        username,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuthorization(string username, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Authorization", new object[] {
                        username,
                        password}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAuthorization(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AuthorizationAsync(string username, string password) {
            this.AuthorizationAsync(username, password, null);
        }
        
        /// <remarks/>
        public void AuthorizationAsync(string username, string password, object userState) {
            if ((this.AuthorizationOperationCompleted == null)) {
                this.AuthorizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthorizationOperationCompleted);
            }
            this.InvokeAsync("Authorization", new object[] {
                        username,
                        password}, this.AuthorizationOperationCompleted, userState);
        }
        
        private void OnAuthorizationOperationCompleted(object arg) {
            if ((this.AuthorizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthorizationCompleted(this, new AuthorizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLicenseType(string guid, string name) {
            object[] results = this.Invoke("GetLicenseType", new object[] {
                        guid,
                        name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseType(string guid, string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseType", new object[] {
                        guid,
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLicenseType(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseTypeAsync(string guid, string name) {
            this.GetLicenseTypeAsync(guid, name, null);
        }
        
        /// <remarks/>
        public void GetLicenseTypeAsync(string guid, string name, object userState) {
            if ((this.GetLicenseTypeOperationCompleted == null)) {
                this.GetLicenseTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseTypeOperationCompleted);
            }
            this.InvokeAsync("GetLicenseType", new object[] {
                        guid,
                        name}, this.GetLicenseTypeOperationCompleted, userState);
        }
        
        private void OnGetLicenseTypeOperationCompleted(object arg) {
            if ((this.GetLicenseTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseTypeCompleted(this, new GetLicenseTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PowerCheck", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PowerCheck(string appID, string businessID, string ip) {
            object[] results = this.Invoke("PowerCheck", new object[] {
                        appID,
                        businessID,
                        ip});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPowerCheck(string appID, string businessID, string ip, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PowerCheck", new object[] {
                        appID,
                        businessID,
                        ip}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndPowerCheck(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PowerCheckAsync(string appID, string businessID, string ip) {
            this.PowerCheckAsync(appID, businessID, ip, null);
        }
        
        /// <remarks/>
        public void PowerCheckAsync(string appID, string businessID, string ip, object userState) {
            if ((this.PowerCheckOperationCompleted == null)) {
                this.PowerCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPowerCheckOperationCompleted);
            }
            this.InvokeAsync("PowerCheck", new object[] {
                        appID,
                        businessID,
                        ip}, this.PowerCheckOperationCompleted, userState);
        }
        
        private void OnPowerCheckOperationCompleted(object arg) {
            if ((this.PowerCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PowerCheckCompleted(this, new PowerCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentListByQuery", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentListByQuery(string guid, string requestXml) {
            object[] results = this.Invoke("GetDocumentListByQuery", new object[] {
                        guid,
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDocumentListByQuery(string guid, string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDocumentListByQuery", new object[] {
                        guid,
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDocumentListByQuery(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentListByQueryAsync(string guid, string requestXml) {
            this.GetDocumentListByQueryAsync(guid, requestXml, null);
        }
        
        /// <remarks/>
        public void GetDocumentListByQueryAsync(string guid, string requestXml, object userState) {
            if ((this.GetDocumentListByQueryOperationCompleted == null)) {
                this.GetDocumentListByQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentListByQueryOperationCompleted);
            }
            this.InvokeAsync("GetDocumentListByQuery", new object[] {
                        guid,
                        requestXml}, this.GetDocumentListByQueryOperationCompleted, userState);
        }
        
        private void OnGetDocumentListByQueryOperationCompleted(object arg) {
            if ((this.GetDocumentListByQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentListByQueryCompleted(this, new GetDocumentListByQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentListByCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentListByCode(string guid, string appID, string businessID, string companyCode) {
            object[] results = this.Invoke("GetDocumentListByCode", new object[] {
                        guid,
                        appID,
                        businessID,
                        companyCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDocumentListByCode(string guid, string appID, string businessID, string companyCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDocumentListByCode", new object[] {
                        guid,
                        appID,
                        businessID,
                        companyCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDocumentListByCode(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentListByCodeAsync(string guid, string appID, string businessID, string companyCode) {
            this.GetDocumentListByCodeAsync(guid, appID, businessID, companyCode, null);
        }
        
        /// <remarks/>
        public void GetDocumentListByCodeAsync(string guid, string appID, string businessID, string companyCode, object userState) {
            if ((this.GetDocumentListByCodeOperationCompleted == null)) {
                this.GetDocumentListByCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentListByCodeOperationCompleted);
            }
            this.InvokeAsync("GetDocumentListByCode", new object[] {
                        guid,
                        appID,
                        businessID,
                        companyCode}, this.GetDocumentListByCodeOperationCompleted, userState);
        }
        
        private void OnGetDocumentListByCodeOperationCompleted(object arg) {
            if ((this.GetDocumentListByCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentListByCodeCompleted(this, new GetDocumentListByCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentListByName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentListByName(string guid, string appID, string businessID, string companyName) {
            object[] results = this.Invoke("GetDocumentListByName", new object[] {
                        guid,
                        appID,
                        businessID,
                        companyName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDocumentListByName(string guid, string appID, string businessID, string companyName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDocumentListByName", new object[] {
                        guid,
                        appID,
                        businessID,
                        companyName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDocumentListByName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentListByNameAsync(string guid, string appID, string businessID, string companyName) {
            this.GetDocumentListByNameAsync(guid, appID, businessID, companyName, null);
        }
        
        /// <remarks/>
        public void GetDocumentListByNameAsync(string guid, string appID, string businessID, string companyName, object userState) {
            if ((this.GetDocumentListByNameOperationCompleted == null)) {
                this.GetDocumentListByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentListByNameOperationCompleted);
            }
            this.InvokeAsync("GetDocumentListByName", new object[] {
                        guid,
                        appID,
                        businessID,
                        companyName}, this.GetDocumentListByNameOperationCompleted, userState);
        }
        
        private void OnGetDocumentListByNameOperationCompleted(object arg) {
            if ((this.GetDocumentListByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentListByNameCompleted(this, new GetDocumentListByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseDataByFileNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLicenseDataByFileNumber(string guid, string appID, string businessID, string licenseType, string licenseFileNumber) {
            object[] results = this.Invoke("GetLicenseDataByFileNumber", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseType,
                        licenseFileNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseDataByFileNumber(string guid, string appID, string businessID, string licenseType, string licenseFileNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseDataByFileNumber", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseType,
                        licenseFileNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLicenseDataByFileNumber(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseDataByFileNumberAsync(string guid, string appID, string businessID, string licenseType, string licenseFileNumber) {
            this.GetLicenseDataByFileNumberAsync(guid, appID, businessID, licenseType, licenseFileNumber, null);
        }
        
        /// <remarks/>
        public void GetLicenseDataByFileNumberAsync(string guid, string appID, string businessID, string licenseType, string licenseFileNumber, object userState) {
            if ((this.GetLicenseDataByFileNumberOperationCompleted == null)) {
                this.GetLicenseDataByFileNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseDataByFileNumberOperationCompleted);
            }
            this.InvokeAsync("GetLicenseDataByFileNumber", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseType,
                        licenseFileNumber}, this.GetLicenseDataByFileNumberOperationCompleted, userState);
        }
        
        private void OnGetLicenseDataByFileNumberOperationCompleted(object arg) {
            if ((this.GetLicenseDataByFileNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseDataByFileNumberCompleted(this, new GetLicenseDataByFileNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseDataByFileNumberTwo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLicenseDataByFileNumberTwo(string guid, string appID, string businessID, string licenseFileNumber) {
            object[] results = this.Invoke("GetLicenseDataByFileNumberTwo", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseFileNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseDataByFileNumberTwo(string guid, string appID, string businessID, string licenseFileNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseDataByFileNumberTwo", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseFileNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLicenseDataByFileNumberTwo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseDataByFileNumberTwoAsync(string guid, string appID, string businessID, string licenseFileNumber) {
            this.GetLicenseDataByFileNumberTwoAsync(guid, appID, businessID, licenseFileNumber, null);
        }
        
        /// <remarks/>
        public void GetLicenseDataByFileNumberTwoAsync(string guid, string appID, string businessID, string licenseFileNumber, object userState) {
            if ((this.GetLicenseDataByFileNumberTwoOperationCompleted == null)) {
                this.GetLicenseDataByFileNumberTwoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseDataByFileNumberTwoOperationCompleted);
            }
            this.InvokeAsync("GetLicenseDataByFileNumberTwo", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseFileNumber}, this.GetLicenseDataByFileNumberTwoOperationCompleted, userState);
        }
        
        private void OnGetLicenseDataByFileNumberTwoOperationCompleted(object arg) {
            if ((this.GetLicenseDataByFileNumberTwoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseDataByFileNumberTwoCompleted(this, new GetLicenseDataByFileNumberTwoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseDataByHolderID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLicenseDataByHolderID(string guid, string appID, string businessID, string licenseName, string licenseType, string holderID) {
            object[] results = this.Invoke("GetLicenseDataByHolderID", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseName,
                        licenseType,
                        holderID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseDataByHolderID(string guid, string appID, string businessID, string licenseName, string licenseType, string holderID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseDataByHolderID", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseName,
                        licenseType,
                        holderID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLicenseDataByHolderID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseDataByHolderIDAsync(string guid, string appID, string businessID, string licenseName, string licenseType, string holderID) {
            this.GetLicenseDataByHolderIDAsync(guid, appID, businessID, licenseName, licenseType, holderID, null);
        }
        
        /// <remarks/>
        public void GetLicenseDataByHolderIDAsync(string guid, string appID, string businessID, string licenseName, string licenseType, string holderID, object userState) {
            if ((this.GetLicenseDataByHolderIDOperationCompleted == null)) {
                this.GetLicenseDataByHolderIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseDataByHolderIDOperationCompleted);
            }
            this.InvokeAsync("GetLicenseDataByHolderID", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseName,
                        licenseType,
                        holderID}, this.GetLicenseDataByHolderIDOperationCompleted, userState);
        }
        
        private void OnGetLicenseDataByHolderIDOperationCompleted(object arg) {
            if ((this.GetLicenseDataByHolderIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseDataByHolderIDCompleted(this, new GetLicenseDataByHolderIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseDataByHolderName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLicenseDataByHolderName(string guid, string appID, string businessID, string licenseName, string licenseType, string holderName) {
            object[] results = this.Invoke("GetLicenseDataByHolderName", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseName,
                        licenseType,
                        holderName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseDataByHolderName(string guid, string appID, string businessID, string licenseName, string licenseType, string holderName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseDataByHolderName", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseName,
                        licenseType,
                        holderName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLicenseDataByHolderName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseDataByHolderNameAsync(string guid, string appID, string businessID, string licenseName, string licenseType, string holderName) {
            this.GetLicenseDataByHolderNameAsync(guid, appID, businessID, licenseName, licenseType, holderName, null);
        }
        
        /// <remarks/>
        public void GetLicenseDataByHolderNameAsync(string guid, string appID, string businessID, string licenseName, string licenseType, string holderName, object userState) {
            if ((this.GetLicenseDataByHolderNameOperationCompleted == null)) {
                this.GetLicenseDataByHolderNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseDataByHolderNameOperationCompleted);
            }
            this.InvokeAsync("GetLicenseDataByHolderName", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseName,
                        licenseType,
                        holderName}, this.GetLicenseDataByHolderNameOperationCompleted, userState);
        }
        
        private void OnGetLicenseDataByHolderNameOperationCompleted(object arg) {
            if ((this.GetLicenseDataByHolderNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseDataByHolderNameCompleted(this, new GetLicenseDataByHolderNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseDataByQuery", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLicenseDataByQuery(string guid, string requestXml) {
            object[] results = this.Invoke("GetLicenseDataByQuery", new object[] {
                        guid,
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseDataByQuery(string guid, string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseDataByQuery", new object[] {
                        guid,
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLicenseDataByQuery(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseDataByQueryAsync(string guid, string requestXml) {
            this.GetLicenseDataByQueryAsync(guid, requestXml, null);
        }
        
        /// <remarks/>
        public void GetLicenseDataByQueryAsync(string guid, string requestXml, object userState) {
            if ((this.GetLicenseDataByQueryOperationCompleted == null)) {
                this.GetLicenseDataByQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseDataByQueryOperationCompleted);
            }
            this.InvokeAsync("GetLicenseDataByQuery", new object[] {
                        guid,
                        requestXml}, this.GetLicenseDataByQueryOperationCompleted, userState);
        }
        
        private void OnGetLicenseDataByQueryOperationCompleted(object arg) {
            if ((this.GetLicenseDataByQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseDataByQueryCompleted(this, new GetLicenseDataByQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLicenseData(string guid, string appID, string businessID, string orgName, string licenseType, string licenseID) {
            object[] results = this.Invoke("GetLicenseData", new object[] {
                        guid,
                        appID,
                        businessID,
                        orgName,
                        licenseType,
                        licenseID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseData(string guid, string appID, string businessID, string orgName, string licenseType, string licenseID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseData", new object[] {
                        guid,
                        appID,
                        businessID,
                        orgName,
                        licenseType,
                        licenseID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLicenseData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseDataAsync(string guid, string appID, string businessID, string orgName, string licenseType, string licenseID) {
            this.GetLicenseDataAsync(guid, appID, businessID, orgName, licenseType, licenseID, null);
        }
        
        /// <remarks/>
        public void GetLicenseDataAsync(string guid, string appID, string businessID, string orgName, string licenseType, string licenseID, object userState) {
            if ((this.GetLicenseDataOperationCompleted == null)) {
                this.GetLicenseDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseDataOperationCompleted);
            }
            this.InvokeAsync("GetLicenseData", new object[] {
                        guid,
                        appID,
                        businessID,
                        orgName,
                        licenseType,
                        licenseID}, this.GetLicenseDataOperationCompleted, userState);
        }
        
        private void OnGetLicenseDataOperationCompleted(object arg) {
            if ((this.GetLicenseDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseDataCompleted(this, new GetLicenseDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseFileByFileNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetLicenseFileByFileNumber(string guid, string appID, string businessID, string licenseType, string licenseFileNumber) {
            object[] results = this.Invoke("GetLicenseFileByFileNumber", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseType,
                        licenseFileNumber});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseFileByFileNumber(string guid, string appID, string businessID, string licenseType, string licenseFileNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseFileByFileNumber", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseType,
                        licenseFileNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetLicenseFileByFileNumber(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseFileByFileNumberAsync(string guid, string appID, string businessID, string licenseType, string licenseFileNumber) {
            this.GetLicenseFileByFileNumberAsync(guid, appID, businessID, licenseType, licenseFileNumber, null);
        }
        
        /// <remarks/>
        public void GetLicenseFileByFileNumberAsync(string guid, string appID, string businessID, string licenseType, string licenseFileNumber, object userState) {
            if ((this.GetLicenseFileByFileNumberOperationCompleted == null)) {
                this.GetLicenseFileByFileNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseFileByFileNumberOperationCompleted);
            }
            this.InvokeAsync("GetLicenseFileByFileNumber", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseType,
                        licenseFileNumber}, this.GetLicenseFileByFileNumberOperationCompleted, userState);
        }
        
        private void OnGetLicenseFileByFileNumberOperationCompleted(object arg) {
            if ((this.GetLicenseFileByFileNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseFileByFileNumberCompleted(this, new GetLicenseFileByFileNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseFileByFileNumberTwo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetLicenseFileByFileNumberTwo(string guid, string appID, string businessID, string licenseFileNumber) {
            object[] results = this.Invoke("GetLicenseFileByFileNumberTwo", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseFileNumber});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseFileByFileNumberTwo(string guid, string appID, string businessID, string licenseFileNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseFileByFileNumberTwo", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseFileNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetLicenseFileByFileNumberTwo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseFileByFileNumberTwoAsync(string guid, string appID, string businessID, string licenseFileNumber) {
            this.GetLicenseFileByFileNumberTwoAsync(guid, appID, businessID, licenseFileNumber, null);
        }
        
        /// <remarks/>
        public void GetLicenseFileByFileNumberTwoAsync(string guid, string appID, string businessID, string licenseFileNumber, object userState) {
            if ((this.GetLicenseFileByFileNumberTwoOperationCompleted == null)) {
                this.GetLicenseFileByFileNumberTwoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseFileByFileNumberTwoOperationCompleted);
            }
            this.InvokeAsync("GetLicenseFileByFileNumberTwo", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseFileNumber}, this.GetLicenseFileByFileNumberTwoOperationCompleted, userState);
        }
        
        private void OnGetLicenseFileByFileNumberTwoOperationCompleted(object arg) {
            if ((this.GetLicenseFileByFileNumberTwoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseFileByFileNumberTwoCompleted(this, new GetLicenseFileByFileNumberTwoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseFileByHolderID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetLicenseFileByHolderID(string guid, string appID, string businessID, string licenseName, string licenseType, string holderID) {
            object[] results = this.Invoke("GetLicenseFileByHolderID", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseName,
                        licenseType,
                        holderID});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseFileByHolderID(string guid, string appID, string businessID, string licenseName, string licenseType, string holderID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseFileByHolderID", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseName,
                        licenseType,
                        holderID}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetLicenseFileByHolderID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseFileByHolderIDAsync(string guid, string appID, string businessID, string licenseName, string licenseType, string holderID) {
            this.GetLicenseFileByHolderIDAsync(guid, appID, businessID, licenseName, licenseType, holderID, null);
        }
        
        /// <remarks/>
        public void GetLicenseFileByHolderIDAsync(string guid, string appID, string businessID, string licenseName, string licenseType, string holderID, object userState) {
            if ((this.GetLicenseFileByHolderIDOperationCompleted == null)) {
                this.GetLicenseFileByHolderIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseFileByHolderIDOperationCompleted);
            }
            this.InvokeAsync("GetLicenseFileByHolderID", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseName,
                        licenseType,
                        holderID}, this.GetLicenseFileByHolderIDOperationCompleted, userState);
        }
        
        private void OnGetLicenseFileByHolderIDOperationCompleted(object arg) {
            if ((this.GetLicenseFileByHolderIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseFileByHolderIDCompleted(this, new GetLicenseFileByHolderIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseFileByHolderName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetLicenseFileByHolderName(string guid, string appID, string businessID, string licenseName, string licenseType, string holderName) {
            object[] results = this.Invoke("GetLicenseFileByHolderName", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseName,
                        licenseType,
                        holderName});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseFileByHolderName(string guid, string appID, string businessID, string licenseName, string licenseType, string holderName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseFileByHolderName", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseName,
                        licenseType,
                        holderName}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetLicenseFileByHolderName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseFileByHolderNameAsync(string guid, string appID, string businessID, string licenseName, string licenseType, string holderName) {
            this.GetLicenseFileByHolderNameAsync(guid, appID, businessID, licenseName, licenseType, holderName, null);
        }
        
        /// <remarks/>
        public void GetLicenseFileByHolderNameAsync(string guid, string appID, string businessID, string licenseName, string licenseType, string holderName, object userState) {
            if ((this.GetLicenseFileByHolderNameOperationCompleted == null)) {
                this.GetLicenseFileByHolderNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseFileByHolderNameOperationCompleted);
            }
            this.InvokeAsync("GetLicenseFileByHolderName", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseName,
                        licenseType,
                        holderName}, this.GetLicenseFileByHolderNameOperationCompleted, userState);
        }
        
        private void OnGetLicenseFileByHolderNameOperationCompleted(object arg) {
            if ((this.GetLicenseFileByHolderNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseFileByHolderNameCompleted(this, new GetLicenseFileByHolderNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetLicenseFile(string guid, string appID, string businessID, string orgName, string licenseType, string licenseID) {
            object[] results = this.Invoke("GetLicenseFile", new object[] {
                        guid,
                        appID,
                        businessID,
                        orgName,
                        licenseType,
                        licenseID});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseFile(string guid, string appID, string businessID, string orgName, string licenseType, string licenseID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseFile", new object[] {
                        guid,
                        appID,
                        businessID,
                        orgName,
                        licenseType,
                        licenseID}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetLicenseFile(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseFileAsync(string guid, string appID, string businessID, string orgName, string licenseType, string licenseID) {
            this.GetLicenseFileAsync(guid, appID, businessID, orgName, licenseType, licenseID, null);
        }
        
        /// <remarks/>
        public void GetLicenseFileAsync(string guid, string appID, string businessID, string orgName, string licenseType, string licenseID, object userState) {
            if ((this.GetLicenseFileOperationCompleted == null)) {
                this.GetLicenseFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseFileOperationCompleted);
            }
            this.InvokeAsync("GetLicenseFile", new object[] {
                        guid,
                        appID,
                        businessID,
                        orgName,
                        licenseType,
                        licenseID}, this.GetLicenseFileOperationCompleted, userState);
        }
        
        private void OnGetLicenseFileOperationCompleted(object arg) {
            if ((this.GetLicenseFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseFileCompleted(this, new GetLicenseFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBusinessLicenseFileByHolderName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetBusinessLicenseFileByHolderName(string guid, string appID, string businessID, string holderName) {
            object[] results = this.Invoke("GetBusinessLicenseFileByHolderName", new object[] {
                        guid,
                        appID,
                        businessID,
                        holderName});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBusinessLicenseFileByHolderName(string guid, string appID, string businessID, string holderName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBusinessLicenseFileByHolderName", new object[] {
                        guid,
                        appID,
                        businessID,
                        holderName}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetBusinessLicenseFileByHolderName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBusinessLicenseFileByHolderNameAsync(string guid, string appID, string businessID, string holderName) {
            this.GetBusinessLicenseFileByHolderNameAsync(guid, appID, businessID, holderName, null);
        }
        
        /// <remarks/>
        public void GetBusinessLicenseFileByHolderNameAsync(string guid, string appID, string businessID, string holderName, object userState) {
            if ((this.GetBusinessLicenseFileByHolderNameOperationCompleted == null)) {
                this.GetBusinessLicenseFileByHolderNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBusinessLicenseFileByHolderNameOperationCompleted);
            }
            this.InvokeAsync("GetBusinessLicenseFileByHolderName", new object[] {
                        guid,
                        appID,
                        businessID,
                        holderName}, this.GetBusinessLicenseFileByHolderNameOperationCompleted, userState);
        }
        
        private void OnGetBusinessLicenseFileByHolderNameOperationCompleted(object arg) {
            if ((this.GetBusinessLicenseFileByHolderNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBusinessLicenseFileByHolderNameCompleted(this, new GetBusinessLicenseFileByHolderNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBusinessLicenseFileByHolderCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetBusinessLicenseFileByHolderCode(string guid, string appID, string businessID, string holderID) {
            object[] results = this.Invoke("GetBusinessLicenseFileByHolderCode", new object[] {
                        guid,
                        appID,
                        businessID,
                        holderID});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBusinessLicenseFileByHolderCode(string guid, string appID, string businessID, string holderID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBusinessLicenseFileByHolderCode", new object[] {
                        guid,
                        appID,
                        businessID,
                        holderID}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetBusinessLicenseFileByHolderCode(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBusinessLicenseFileByHolderCodeAsync(string guid, string appID, string businessID, string holderID) {
            this.GetBusinessLicenseFileByHolderCodeAsync(guid, appID, businessID, holderID, null);
        }
        
        /// <remarks/>
        public void GetBusinessLicenseFileByHolderCodeAsync(string guid, string appID, string businessID, string holderID, object userState) {
            if ((this.GetBusinessLicenseFileByHolderCodeOperationCompleted == null)) {
                this.GetBusinessLicenseFileByHolderCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBusinessLicenseFileByHolderCodeOperationCompleted);
            }
            this.InvokeAsync("GetBusinessLicenseFileByHolderCode", new object[] {
                        guid,
                        appID,
                        businessID,
                        holderID}, this.GetBusinessLicenseFileByHolderCodeOperationCompleted, userState);
        }
        
        private void OnGetBusinessLicenseFileByHolderCodeOperationCompleted(object arg) {
            if ((this.GetBusinessLicenseFileByHolderCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBusinessLicenseFileByHolderCodeCompleted(this, new GetBusinessLicenseFileByHolderCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseFileByQuery", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetLicenseFileByQuery(string guid, string requestXml) {
            object[] results = this.Invoke("GetLicenseFileByQuery", new object[] {
                        guid,
                        requestXml});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseFileByQuery(string guid, string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseFileByQuery", new object[] {
                        guid,
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetLicenseFileByQuery(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseFileByQueryAsync(string guid, string requestXml) {
            this.GetLicenseFileByQueryAsync(guid, requestXml, null);
        }
        
        /// <remarks/>
        public void GetLicenseFileByQueryAsync(string guid, string requestXml, object userState) {
            if ((this.GetLicenseFileByQueryOperationCompleted == null)) {
                this.GetLicenseFileByQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseFileByQueryOperationCompleted);
            }
            this.InvokeAsync("GetLicenseFileByQuery", new object[] {
                        guid,
                        requestXml}, this.GetLicenseFileByQueryOperationCompleted, userState);
        }
        
        private void OnGetLicenseFileByQueryOperationCompleted(object arg) {
            if ((this.GetLicenseFileByQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseFileByQueryCompleted(this, new GetLicenseFileByQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerifyLicenseByFileNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VerifyLicenseByFileNumber(string guid, string appID, string businessID, string licenseType, string licenseFileNumber) {
            object[] results = this.Invoke("VerifyLicenseByFileNumber", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseType,
                        licenseFileNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginVerifyLicenseByFileNumber(string guid, string appID, string businessID, string licenseType, string licenseFileNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("VerifyLicenseByFileNumber", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseType,
                        licenseFileNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndVerifyLicenseByFileNumber(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyLicenseByFileNumberAsync(string guid, string appID, string businessID, string licenseType, string licenseFileNumber) {
            this.VerifyLicenseByFileNumberAsync(guid, appID, businessID, licenseType, licenseFileNumber, null);
        }
        
        /// <remarks/>
        public void VerifyLicenseByFileNumberAsync(string guid, string appID, string businessID, string licenseType, string licenseFileNumber, object userState) {
            if ((this.VerifyLicenseByFileNumberOperationCompleted == null)) {
                this.VerifyLicenseByFileNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyLicenseByFileNumberOperationCompleted);
            }
            this.InvokeAsync("VerifyLicenseByFileNumber", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseType,
                        licenseFileNumber}, this.VerifyLicenseByFileNumberOperationCompleted, userState);
        }
        
        private void OnVerifyLicenseByFileNumberOperationCompleted(object arg) {
            if ((this.VerifyLicenseByFileNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyLicenseByFileNumberCompleted(this, new VerifyLicenseByFileNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerifyLicenseByFileNumberTwo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VerifyLicenseByFileNumberTwo(string guid, string appID, string businessID, string licenseFileNumber) {
            object[] results = this.Invoke("VerifyLicenseByFileNumberTwo", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseFileNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginVerifyLicenseByFileNumberTwo(string guid, string appID, string businessID, string licenseFileNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("VerifyLicenseByFileNumberTwo", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseFileNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndVerifyLicenseByFileNumberTwo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyLicenseByFileNumberTwoAsync(string guid, string appID, string businessID, string licenseFileNumber) {
            this.VerifyLicenseByFileNumberTwoAsync(guid, appID, businessID, licenseFileNumber, null);
        }
        
        /// <remarks/>
        public void VerifyLicenseByFileNumberTwoAsync(string guid, string appID, string businessID, string licenseFileNumber, object userState) {
            if ((this.VerifyLicenseByFileNumberTwoOperationCompleted == null)) {
                this.VerifyLicenseByFileNumberTwoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyLicenseByFileNumberTwoOperationCompleted);
            }
            this.InvokeAsync("VerifyLicenseByFileNumberTwo", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseFileNumber}, this.VerifyLicenseByFileNumberTwoOperationCompleted, userState);
        }
        
        private void OnVerifyLicenseByFileNumberTwoOperationCompleted(object arg) {
            if ((this.VerifyLicenseByFileNumberTwoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyLicenseByFileNumberTwoCompleted(this, new VerifyLicenseByFileNumberTwoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerifyLicenseByHolderID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VerifyLicenseByHolderID(string guid, string appID, string businessID, string licenseName, string licenseType, string holderID) {
            object[] results = this.Invoke("VerifyLicenseByHolderID", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseName,
                        licenseType,
                        holderID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginVerifyLicenseByHolderID(string guid, string appID, string businessID, string licenseName, string licenseType, string holderID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("VerifyLicenseByHolderID", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseName,
                        licenseType,
                        holderID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndVerifyLicenseByHolderID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyLicenseByHolderIDAsync(string guid, string appID, string businessID, string licenseName, string licenseType, string holderID) {
            this.VerifyLicenseByHolderIDAsync(guid, appID, businessID, licenseName, licenseType, holderID, null);
        }
        
        /// <remarks/>
        public void VerifyLicenseByHolderIDAsync(string guid, string appID, string businessID, string licenseName, string licenseType, string holderID, object userState) {
            if ((this.VerifyLicenseByHolderIDOperationCompleted == null)) {
                this.VerifyLicenseByHolderIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyLicenseByHolderIDOperationCompleted);
            }
            this.InvokeAsync("VerifyLicenseByHolderID", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseName,
                        licenseType,
                        holderID}, this.VerifyLicenseByHolderIDOperationCompleted, userState);
        }
        
        private void OnVerifyLicenseByHolderIDOperationCompleted(object arg) {
            if ((this.VerifyLicenseByHolderIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyLicenseByHolderIDCompleted(this, new VerifyLicenseByHolderIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerifyLicenseByHolderName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VerifyLicenseByHolderName(string guid, string appID, string businessID, string licenseName, string licenseType, string holderName) {
            object[] results = this.Invoke("VerifyLicenseByHolderName", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseName,
                        licenseType,
                        holderName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginVerifyLicenseByHolderName(string guid, string appID, string businessID, string licenseName, string licenseType, string holderName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("VerifyLicenseByHolderName", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseName,
                        licenseType,
                        holderName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndVerifyLicenseByHolderName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyLicenseByHolderNameAsync(string guid, string appID, string businessID, string licenseName, string licenseType, string holderName) {
            this.VerifyLicenseByHolderNameAsync(guid, appID, businessID, licenseName, licenseType, holderName, null);
        }
        
        /// <remarks/>
        public void VerifyLicenseByHolderNameAsync(string guid, string appID, string businessID, string licenseName, string licenseType, string holderName, object userState) {
            if ((this.VerifyLicenseByHolderNameOperationCompleted == null)) {
                this.VerifyLicenseByHolderNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyLicenseByHolderNameOperationCompleted);
            }
            this.InvokeAsync("VerifyLicenseByHolderName", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseName,
                        licenseType,
                        holderName}, this.VerifyLicenseByHolderNameOperationCompleted, userState);
        }
        
        private void OnVerifyLicenseByHolderNameOperationCompleted(object arg) {
            if ((this.VerifyLicenseByHolderNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyLicenseByHolderNameCompleted(this, new VerifyLicenseByHolderNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerifyLicenseByLicenseID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VerifyLicenseByLicenseID(string guid, string appID, string businessID, string orgName, string licenseType, string licenseID) {
            object[] results = this.Invoke("VerifyLicenseByLicenseID", new object[] {
                        guid,
                        appID,
                        businessID,
                        orgName,
                        licenseType,
                        licenseID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginVerifyLicenseByLicenseID(string guid, string appID, string businessID, string orgName, string licenseType, string licenseID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("VerifyLicenseByLicenseID", new object[] {
                        guid,
                        appID,
                        businessID,
                        orgName,
                        licenseType,
                        licenseID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndVerifyLicenseByLicenseID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyLicenseByLicenseIDAsync(string guid, string appID, string businessID, string orgName, string licenseType, string licenseID) {
            this.VerifyLicenseByLicenseIDAsync(guid, appID, businessID, orgName, licenseType, licenseID, null);
        }
        
        /// <remarks/>
        public void VerifyLicenseByLicenseIDAsync(string guid, string appID, string businessID, string orgName, string licenseType, string licenseID, object userState) {
            if ((this.VerifyLicenseByLicenseIDOperationCompleted == null)) {
                this.VerifyLicenseByLicenseIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyLicenseByLicenseIDOperationCompleted);
            }
            this.InvokeAsync("VerifyLicenseByLicenseID", new object[] {
                        guid,
                        appID,
                        businessID,
                        orgName,
                        licenseType,
                        licenseID}, this.VerifyLicenseByLicenseIDOperationCompleted, userState);
        }
        
        private void OnVerifyLicenseByLicenseIDOperationCompleted(object arg) {
            if ((this.VerifyLicenseByLicenseIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyLicenseByLicenseIDCompleted(this, new VerifyLicenseByLicenseIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentListBySFZ", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentListBySFZ(string guid, string appID, string businessID, string sfz, string name) {
            object[] results = this.Invoke("GetDocumentListBySFZ", new object[] {
                        guid,
                        appID,
                        businessID,
                        sfz,
                        name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDocumentListBySFZ(string guid, string appID, string businessID, string sfz, string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDocumentListBySFZ", new object[] {
                        guid,
                        appID,
                        businessID,
                        sfz,
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDocumentListBySFZ(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentListBySFZAsync(string guid, string appID, string businessID, string sfz, string name) {
            this.GetDocumentListBySFZAsync(guid, appID, businessID, sfz, name, null);
        }
        
        /// <remarks/>
        public void GetDocumentListBySFZAsync(string guid, string appID, string businessID, string sfz, string name, object userState) {
            if ((this.GetDocumentListBySFZOperationCompleted == null)) {
                this.GetDocumentListBySFZOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentListBySFZOperationCompleted);
            }
            this.InvokeAsync("GetDocumentListBySFZ", new object[] {
                        guid,
                        appID,
                        businessID,
                        sfz,
                        name}, this.GetDocumentListBySFZOperationCompleted, userState);
        }
        
        private void OnGetDocumentListBySFZOperationCompleted(object arg) {
            if ((this.GetDocumentListBySFZCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentListBySFZCompleted(this, new GetDocumentListBySFZCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentListByQueryOfPerson", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentListByQueryOfPerson(string guid, string requestXml) {
            object[] results = this.Invoke("GetDocumentListByQueryOfPerson", new object[] {
                        guid,
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDocumentListByQueryOfPerson(string guid, string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDocumentListByQueryOfPerson", new object[] {
                        guid,
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDocumentListByQueryOfPerson(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentListByQueryOfPersonAsync(string guid, string requestXml) {
            this.GetDocumentListByQueryOfPersonAsync(guid, requestXml, null);
        }
        
        /// <remarks/>
        public void GetDocumentListByQueryOfPersonAsync(string guid, string requestXml, object userState) {
            if ((this.GetDocumentListByQueryOfPersonOperationCompleted == null)) {
                this.GetDocumentListByQueryOfPersonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentListByQueryOfPersonOperationCompleted);
            }
            this.InvokeAsync("GetDocumentListByQueryOfPerson", new object[] {
                        guid,
                        requestXml}, this.GetDocumentListByQueryOfPersonOperationCompleted, userState);
        }
        
        private void OnGetDocumentListByQueryOfPersonOperationCompleted(object arg) {
            if ((this.GetDocumentListByQueryOfPersonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentListByQueryOfPersonCompleted(this, new GetDocumentListByQueryOfPersonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseFileByQueryOfPerson", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetLicenseFileByQueryOfPerson(string guid, string requestXml) {
            object[] results = this.Invoke("GetLicenseFileByQueryOfPerson", new object[] {
                        guid,
                        requestXml});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseFileByQueryOfPerson(string guid, string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseFileByQueryOfPerson", new object[] {
                        guid,
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetLicenseFileByQueryOfPerson(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseFileByQueryOfPersonAsync(string guid, string requestXml) {
            this.GetLicenseFileByQueryOfPersonAsync(guid, requestXml, null);
        }
        
        /// <remarks/>
        public void GetLicenseFileByQueryOfPersonAsync(string guid, string requestXml, object userState) {
            if ((this.GetLicenseFileByQueryOfPersonOperationCompleted == null)) {
                this.GetLicenseFileByQueryOfPersonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseFileByQueryOfPersonOperationCompleted);
            }
            this.InvokeAsync("GetLicenseFileByQueryOfPerson", new object[] {
                        guid,
                        requestXml}, this.GetLicenseFileByQueryOfPersonOperationCompleted, userState);
        }
        
        private void OnGetLicenseFileByQueryOfPersonOperationCompleted(object arg) {
            if ((this.GetLicenseFileByQueryOfPersonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseFileByQueryOfPersonCompleted(this, new GetLicenseFileByQueryOfPersonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseDataByQueryOfPerson", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLicenseDataByQueryOfPerson(string guid, string requestXml) {
            object[] results = this.Invoke("GetLicenseDataByQueryOfPerson", new object[] {
                        guid,
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseDataByQueryOfPerson(string guid, string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseDataByQueryOfPerson", new object[] {
                        guid,
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLicenseDataByQueryOfPerson(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseDataByQueryOfPersonAsync(string guid, string requestXml) {
            this.GetLicenseDataByQueryOfPersonAsync(guid, requestXml, null);
        }
        
        /// <remarks/>
        public void GetLicenseDataByQueryOfPersonAsync(string guid, string requestXml, object userState) {
            if ((this.GetLicenseDataByQueryOfPersonOperationCompleted == null)) {
                this.GetLicenseDataByQueryOfPersonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseDataByQueryOfPersonOperationCompleted);
            }
            this.InvokeAsync("GetLicenseDataByQueryOfPerson", new object[] {
                        guid,
                        requestXml}, this.GetLicenseDataByQueryOfPersonOperationCompleted, userState);
        }
        
        private void OnGetLicenseDataByQueryOfPersonOperationCompleted(object arg) {
            if ((this.GetLicenseDataByQueryOfPersonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseDataByQueryOfPersonCompleted(this, new GetLicenseDataByQueryOfPersonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseZMDataByFileNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLicenseZMDataByFileNumber(string guid, string appID, string businessID, string licenseType, string licenseFileNumber) {
            object[] results = this.Invoke("GetLicenseZMDataByFileNumber", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseType,
                        licenseFileNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseZMDataByFileNumber(string guid, string appID, string businessID, string licenseType, string licenseFileNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseZMDataByFileNumber", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseType,
                        licenseFileNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLicenseZMDataByFileNumber(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseZMDataByFileNumberAsync(string guid, string appID, string businessID, string licenseType, string licenseFileNumber) {
            this.GetLicenseZMDataByFileNumberAsync(guid, appID, businessID, licenseType, licenseFileNumber, null);
        }
        
        /// <remarks/>
        public void GetLicenseZMDataByFileNumberAsync(string guid, string appID, string businessID, string licenseType, string licenseFileNumber, object userState) {
            if ((this.GetLicenseZMDataByFileNumberOperationCompleted == null)) {
                this.GetLicenseZMDataByFileNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseZMDataByFileNumberOperationCompleted);
            }
            this.InvokeAsync("GetLicenseZMDataByFileNumber", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseType,
                        licenseFileNumber}, this.GetLicenseZMDataByFileNumberOperationCompleted, userState);
        }
        
        private void OnGetLicenseZMDataByFileNumberOperationCompleted(object arg) {
            if ((this.GetLicenseZMDataByFileNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseZMDataByFileNumberCompleted(this, new GetLicenseZMDataByFileNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPowerObjList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPowerObjList(string guid, string appID, string businessID) {
            object[] results = this.Invoke("GetPowerObjList", new object[] {
                        guid,
                        appID,
                        businessID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPowerObjList(string guid, string appID, string businessID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPowerObjList", new object[] {
                        guid,
                        appID,
                        businessID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetPowerObjList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPowerObjListAsync(string guid, string appID, string businessID) {
            this.GetPowerObjListAsync(guid, appID, businessID, null);
        }
        
        /// <remarks/>
        public void GetPowerObjListAsync(string guid, string appID, string businessID, object userState) {
            if ((this.GetPowerObjListOperationCompleted == null)) {
                this.GetPowerObjListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPowerObjListOperationCompleted);
            }
            this.InvokeAsync("GetPowerObjList", new object[] {
                        guid,
                        appID,
                        businessID}, this.GetPowerObjListOperationCompleted, userState);
        }
        
        private void OnGetPowerObjListOperationCompleted(object arg) {
            if ((this.GetPowerObjListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPowerObjListCompleted(this, new GetPowerObjListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentListThrowCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentListThrowCode(string guid, string appID, string businessID, string companyCode, string XmlInfo) {
            object[] results = this.Invoke("GetDocumentListThrowCode", new object[] {
                        guid,
                        appID,
                        businessID,
                        companyCode,
                        XmlInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDocumentListThrowCode(string guid, string appID, string businessID, string companyCode, string XmlInfo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDocumentListThrowCode", new object[] {
                        guid,
                        appID,
                        businessID,
                        companyCode,
                        XmlInfo}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDocumentListThrowCode(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentListThrowCodeAsync(string guid, string appID, string businessID, string companyCode, string XmlInfo) {
            this.GetDocumentListThrowCodeAsync(guid, appID, businessID, companyCode, XmlInfo, null);
        }
        
        /// <remarks/>
        public void GetDocumentListThrowCodeAsync(string guid, string appID, string businessID, string companyCode, string XmlInfo, object userState) {
            if ((this.GetDocumentListThrowCodeOperationCompleted == null)) {
                this.GetDocumentListThrowCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentListThrowCodeOperationCompleted);
            }
            this.InvokeAsync("GetDocumentListThrowCode", new object[] {
                        guid,
                        appID,
                        businessID,
                        companyCode,
                        XmlInfo}, this.GetDocumentListThrowCodeOperationCompleted, userState);
        }
        
        private void OnGetDocumentListThrowCodeOperationCompleted(object arg) {
            if ((this.GetDocumentListThrowCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentListThrowCodeCompleted(this, new GetDocumentListThrowCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentListThrowName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentListThrowName(string guid, string appID, string businessID, string companyName, string XmlInfo) {
            object[] results = this.Invoke("GetDocumentListThrowName", new object[] {
                        guid,
                        appID,
                        businessID,
                        companyName,
                        XmlInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDocumentListThrowName(string guid, string appID, string businessID, string companyName, string XmlInfo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDocumentListThrowName", new object[] {
                        guid,
                        appID,
                        businessID,
                        companyName,
                        XmlInfo}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDocumentListThrowName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentListThrowNameAsync(string guid, string appID, string businessID, string companyName, string XmlInfo) {
            this.GetDocumentListThrowNameAsync(guid, appID, businessID, companyName, XmlInfo, null);
        }
        
        /// <remarks/>
        public void GetDocumentListThrowNameAsync(string guid, string appID, string businessID, string companyName, string XmlInfo, object userState) {
            if ((this.GetDocumentListThrowNameOperationCompleted == null)) {
                this.GetDocumentListThrowNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentListThrowNameOperationCompleted);
            }
            this.InvokeAsync("GetDocumentListThrowName", new object[] {
                        guid,
                        appID,
                        businessID,
                        companyName,
                        XmlInfo}, this.GetDocumentListThrowNameOperationCompleted, userState);
        }
        
        private void OnGetDocumentListThrowNameOperationCompleted(object arg) {
            if ((this.GetDocumentListThrowNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentListThrowNameCompleted(this, new GetDocumentListThrowNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseZMDataFromDS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLicenseZMDataFromDS(string guid, string appID, string businessID, string requestXml) {
            object[] results = this.Invoke("GetLicenseZMDataFromDS", new object[] {
                        guid,
                        appID,
                        businessID,
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseZMDataFromDS(string guid, string appID, string businessID, string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseZMDataFromDS", new object[] {
                        guid,
                        appID,
                        businessID,
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLicenseZMDataFromDS(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseZMDataFromDSAsync(string guid, string appID, string businessID, string requestXml) {
            this.GetLicenseZMDataFromDSAsync(guid, appID, businessID, requestXml, null);
        }
        
        /// <remarks/>
        public void GetLicenseZMDataFromDSAsync(string guid, string appID, string businessID, string requestXml, object userState) {
            if ((this.GetLicenseZMDataFromDSOperationCompleted == null)) {
                this.GetLicenseZMDataFromDSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseZMDataFromDSOperationCompleted);
            }
            this.InvokeAsync("GetLicenseZMDataFromDS", new object[] {
                        guid,
                        appID,
                        businessID,
                        requestXml}, this.GetLicenseZMDataFromDSOperationCompleted, userState);
        }
        
        private void OnGetLicenseZMDataFromDSOperationCompleted(object arg) {
            if ((this.GetLicenseZMDataFromDSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseZMDataFromDSCompleted(this, new GetLicenseZMDataFromDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseDataFromDS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLicenseDataFromDS(string guid, string appID, string businessID, string requestXml) {
            object[] results = this.Invoke("GetLicenseDataFromDS", new object[] {
                        guid,
                        appID,
                        businessID,
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseDataFromDS(string guid, string appID, string businessID, string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseDataFromDS", new object[] {
                        guid,
                        appID,
                        businessID,
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLicenseDataFromDS(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseDataFromDSAsync(string guid, string appID, string businessID, string requestXml) {
            this.GetLicenseDataFromDSAsync(guid, appID, businessID, requestXml, null);
        }
        
        /// <remarks/>
        public void GetLicenseDataFromDSAsync(string guid, string appID, string businessID, string requestXml, object userState) {
            if ((this.GetLicenseDataFromDSOperationCompleted == null)) {
                this.GetLicenseDataFromDSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseDataFromDSOperationCompleted);
            }
            this.InvokeAsync("GetLicenseDataFromDS", new object[] {
                        guid,
                        appID,
                        businessID,
                        requestXml}, this.GetLicenseDataFromDSOperationCompleted, userState);
        }
        
        private void OnGetLicenseDataFromDSOperationCompleted(object arg) {
            if ((this.GetLicenseDataFromDSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseDataFromDSCompleted(this, new GetLicenseDataFromDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseFileFromDS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetLicenseFileFromDS(string guid, string appID, string businessID, string requestXml) {
            object[] results = this.Invoke("GetLicenseFileFromDS", new object[] {
                        guid,
                        appID,
                        businessID,
                        requestXml});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseFileFromDS(string guid, string appID, string businessID, string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseFileFromDS", new object[] {
                        guid,
                        appID,
                        businessID,
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetLicenseFileFromDS(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseFileFromDSAsync(string guid, string appID, string businessID, string requestXml) {
            this.GetLicenseFileFromDSAsync(guid, appID, businessID, requestXml, null);
        }
        
        /// <remarks/>
        public void GetLicenseFileFromDSAsync(string guid, string appID, string businessID, string requestXml, object userState) {
            if ((this.GetLicenseFileFromDSOperationCompleted == null)) {
                this.GetLicenseFileFromDSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseFileFromDSOperationCompleted);
            }
            this.InvokeAsync("GetLicenseFileFromDS", new object[] {
                        guid,
                        appID,
                        businessID,
                        requestXml}, this.GetLicenseFileFromDSOperationCompleted, userState);
        }
        
        private void OnGetLicenseFileFromDSOperationCompleted(object arg) {
            if ((this.GetLicenseFileFromDSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseFileFromDSCompleted(this, new GetLicenseFileFromDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerifyLicenseFromDS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VerifyLicenseFromDS(string guid, string appID, string businessID, string requestXml) {
            object[] results = this.Invoke("VerifyLicenseFromDS", new object[] {
                        guid,
                        appID,
                        businessID,
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginVerifyLicenseFromDS(string guid, string appID, string businessID, string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("VerifyLicenseFromDS", new object[] {
                        guid,
                        appID,
                        businessID,
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndVerifyLicenseFromDS(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyLicenseFromDSAsync(string guid, string appID, string businessID, string requestXml) {
            this.VerifyLicenseFromDSAsync(guid, appID, businessID, requestXml, null);
        }
        
        /// <remarks/>
        public void VerifyLicenseFromDSAsync(string guid, string appID, string businessID, string requestXml, object userState) {
            if ((this.VerifyLicenseFromDSOperationCompleted == null)) {
                this.VerifyLicenseFromDSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyLicenseFromDSOperationCompleted);
            }
            this.InvokeAsync("VerifyLicenseFromDS", new object[] {
                        guid,
                        appID,
                        businessID,
                        requestXml}, this.VerifyLicenseFromDSOperationCompleted, userState);
        }
        
        private void OnVerifyLicenseFromDSOperationCompleted(object arg) {
            if ((this.VerifyLicenseFromDSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyLicenseFromDSCompleted(this, new VerifyLicenseFromDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegLicenseShareLog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RegLicenseShareLog(string guid, string logXml) {
            object[] results = this.Invoke("RegLicenseShareLog", new object[] {
                        guid,
                        logXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRegLicenseShareLog(string guid, string logXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RegLicenseShareLog", new object[] {
                        guid,
                        logXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRegLicenseShareLog(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RegLicenseShareLogAsync(string guid, string logXml) {
            this.RegLicenseShareLogAsync(guid, logXml, null);
        }
        
        /// <remarks/>
        public void RegLicenseShareLogAsync(string guid, string logXml, object userState) {
            if ((this.RegLicenseShareLogOperationCompleted == null)) {
                this.RegLicenseShareLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegLicenseShareLogOperationCompleted);
            }
            this.InvokeAsync("RegLicenseShareLog", new object[] {
                        guid,
                        logXml}, this.RegLicenseShareLogOperationCompleted, userState);
        }
        
        private void OnRegLicenseShareLogOperationCompleted(object arg) {
            if ((this.RegLicenseShareLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegLicenseShareLogCompleted(this, new RegLicenseShareLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentListByQuery_KX", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentListByQuery_KX(string guid, string requestXml) {
            object[] results = this.Invoke("GetDocumentListByQuery_KX", new object[] {
                        guid,
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDocumentListByQuery_KX(string guid, string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDocumentListByQuery_KX", new object[] {
                        guid,
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDocumentListByQuery_KX(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentListByQuery_KXAsync(string guid, string requestXml) {
            this.GetDocumentListByQuery_KXAsync(guid, requestXml, null);
        }
        
        /// <remarks/>
        public void GetDocumentListByQuery_KXAsync(string guid, string requestXml, object userState) {
            if ((this.GetDocumentListByQuery_KXOperationCompleted == null)) {
                this.GetDocumentListByQuery_KXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentListByQuery_KXOperationCompleted);
            }
            this.InvokeAsync("GetDocumentListByQuery_KX", new object[] {
                        guid,
                        requestXml}, this.GetDocumentListByQuery_KXOperationCompleted, userState);
        }
        
        private void OnGetDocumentListByQuery_KXOperationCompleted(object arg) {
            if ((this.GetDocumentListByQuery_KXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentListByQuery_KXCompleted(this, new GetDocumentListByQuery_KXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseImageByFileNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public byte[][] GetLicenseImageByFileNumber(string guid, string appID, string businessID, string licenseType, string licenseFileNumber) {
            object[] results = this.Invoke("GetLicenseImageByFileNumber", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseType,
                        licenseFileNumber});
            return ((byte[][])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseImageByFileNumber(string guid, string appID, string businessID, string licenseType, string licenseFileNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseImageByFileNumber", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseType,
                        licenseFileNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[][] EndGetLicenseImageByFileNumber(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[][])(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseImageByFileNumberAsync(string guid, string appID, string businessID, string licenseType, string licenseFileNumber) {
            this.GetLicenseImageByFileNumberAsync(guid, appID, businessID, licenseType, licenseFileNumber, null);
        }
        
        /// <remarks/>
        public void GetLicenseImageByFileNumberAsync(string guid, string appID, string businessID, string licenseType, string licenseFileNumber, object userState) {
            if ((this.GetLicenseImageByFileNumberOperationCompleted == null)) {
                this.GetLicenseImageByFileNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseImageByFileNumberOperationCompleted);
            }
            this.InvokeAsync("GetLicenseImageByFileNumber", new object[] {
                        guid,
                        appID,
                        businessID,
                        licenseType,
                        licenseFileNumber}, this.GetLicenseImageByFileNumberOperationCompleted, userState);
        }
        
        private void OnGetLicenseImageByFileNumberOperationCompleted(object arg) {
            if ((this.GetLicenseImageByFileNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseImageByFileNumberCompleted(this, new GetLicenseImageByFileNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LicenseIsExist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LicenseIsExist(string guid, string requestXml) {
            object[] results = this.Invoke("LicenseIsExist", new object[] {
                        guid,
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLicenseIsExist(string guid, string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LicenseIsExist", new object[] {
                        guid,
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndLicenseIsExist(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LicenseIsExistAsync(string guid, string requestXml) {
            this.LicenseIsExistAsync(guid, requestXml, null);
        }
        
        /// <remarks/>
        public void LicenseIsExistAsync(string guid, string requestXml, object userState) {
            if ((this.LicenseIsExistOperationCompleted == null)) {
                this.LicenseIsExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLicenseIsExistOperationCompleted);
            }
            this.InvokeAsync("LicenseIsExist", new object[] {
                        guid,
                        requestXml}, this.LicenseIsExistOperationCompleted, userState);
        }
        
        private void OnLicenseIsExistOperationCompleted(object arg) {
            if ((this.LicenseIsExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LicenseIsExistCompleted(this, new LicenseIsExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void testCompletedEventHandler(object sender, testCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class testCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal testCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void AuthorizationCompletedEventHandler(object sender, AuthorizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthorizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthorizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetLicenseTypeCompletedEventHandler(object sender, GetLicenseTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void PowerCheckCompletedEventHandler(object sender, PowerCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PowerCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PowerCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetDocumentListByQueryCompletedEventHandler(object sender, GetDocumentListByQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentListByQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentListByQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetDocumentListByCodeCompletedEventHandler(object sender, GetDocumentListByCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentListByCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentListByCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetDocumentListByNameCompletedEventHandler(object sender, GetDocumentListByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentListByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentListByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetLicenseDataByFileNumberCompletedEventHandler(object sender, GetLicenseDataByFileNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseDataByFileNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseDataByFileNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetLicenseDataByFileNumberTwoCompletedEventHandler(object sender, GetLicenseDataByFileNumberTwoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseDataByFileNumberTwoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseDataByFileNumberTwoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetLicenseDataByHolderIDCompletedEventHandler(object sender, GetLicenseDataByHolderIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseDataByHolderIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseDataByHolderIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetLicenseDataByHolderNameCompletedEventHandler(object sender, GetLicenseDataByHolderNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseDataByHolderNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseDataByHolderNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetLicenseDataByQueryCompletedEventHandler(object sender, GetLicenseDataByQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseDataByQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseDataByQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetLicenseDataCompletedEventHandler(object sender, GetLicenseDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetLicenseFileByFileNumberCompletedEventHandler(object sender, GetLicenseFileByFileNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseFileByFileNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseFileByFileNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetLicenseFileByFileNumberTwoCompletedEventHandler(object sender, GetLicenseFileByFileNumberTwoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseFileByFileNumberTwoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseFileByFileNumberTwoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetLicenseFileByHolderIDCompletedEventHandler(object sender, GetLicenseFileByHolderIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseFileByHolderIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseFileByHolderIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetLicenseFileByHolderNameCompletedEventHandler(object sender, GetLicenseFileByHolderNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseFileByHolderNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseFileByHolderNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetLicenseFileCompletedEventHandler(object sender, GetLicenseFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetBusinessLicenseFileByHolderNameCompletedEventHandler(object sender, GetBusinessLicenseFileByHolderNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBusinessLicenseFileByHolderNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBusinessLicenseFileByHolderNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetBusinessLicenseFileByHolderCodeCompletedEventHandler(object sender, GetBusinessLicenseFileByHolderCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBusinessLicenseFileByHolderCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBusinessLicenseFileByHolderCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetLicenseFileByQueryCompletedEventHandler(object sender, GetLicenseFileByQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseFileByQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseFileByQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void VerifyLicenseByFileNumberCompletedEventHandler(object sender, VerifyLicenseByFileNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyLicenseByFileNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyLicenseByFileNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void VerifyLicenseByFileNumberTwoCompletedEventHandler(object sender, VerifyLicenseByFileNumberTwoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyLicenseByFileNumberTwoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyLicenseByFileNumberTwoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void VerifyLicenseByHolderIDCompletedEventHandler(object sender, VerifyLicenseByHolderIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyLicenseByHolderIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyLicenseByHolderIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void VerifyLicenseByHolderNameCompletedEventHandler(object sender, VerifyLicenseByHolderNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyLicenseByHolderNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyLicenseByHolderNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void VerifyLicenseByLicenseIDCompletedEventHandler(object sender, VerifyLicenseByLicenseIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyLicenseByLicenseIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyLicenseByLicenseIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetDocumentListBySFZCompletedEventHandler(object sender, GetDocumentListBySFZCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentListBySFZCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentListBySFZCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetDocumentListByQueryOfPersonCompletedEventHandler(object sender, GetDocumentListByQueryOfPersonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentListByQueryOfPersonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentListByQueryOfPersonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetLicenseFileByQueryOfPersonCompletedEventHandler(object sender, GetLicenseFileByQueryOfPersonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseFileByQueryOfPersonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseFileByQueryOfPersonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetLicenseDataByQueryOfPersonCompletedEventHandler(object sender, GetLicenseDataByQueryOfPersonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseDataByQueryOfPersonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseDataByQueryOfPersonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetLicenseZMDataByFileNumberCompletedEventHandler(object sender, GetLicenseZMDataByFileNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseZMDataByFileNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseZMDataByFileNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetPowerObjListCompletedEventHandler(object sender, GetPowerObjListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPowerObjListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPowerObjListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetDocumentListThrowCodeCompletedEventHandler(object sender, GetDocumentListThrowCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentListThrowCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentListThrowCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetDocumentListThrowNameCompletedEventHandler(object sender, GetDocumentListThrowNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentListThrowNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentListThrowNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetLicenseZMDataFromDSCompletedEventHandler(object sender, GetLicenseZMDataFromDSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseZMDataFromDSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseZMDataFromDSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetLicenseDataFromDSCompletedEventHandler(object sender, GetLicenseDataFromDSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseDataFromDSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseDataFromDSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetLicenseFileFromDSCompletedEventHandler(object sender, GetLicenseFileFromDSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseFileFromDSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseFileFromDSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void VerifyLicenseFromDSCompletedEventHandler(object sender, VerifyLicenseFromDSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyLicenseFromDSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyLicenseFromDSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void RegLicenseShareLogCompletedEventHandler(object sender, RegLicenseShareLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegLicenseShareLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegLicenseShareLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetDocumentListByQuery_KXCompletedEventHandler(object sender, GetDocumentListByQuery_KXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentListByQuery_KXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentListByQuery_KXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetLicenseImageByFileNumberCompletedEventHandler(object sender, GetLicenseImageByFileNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseImageByFileNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseImageByFileNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void LicenseIsExistCompletedEventHandler(object sender, LicenseIsExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LicenseIsExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LicenseIsExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
